name: Deploy Node to AWS EC2

on:
  workflow_dispatch:
  #push:
  #  branches:
  #    - main  # Runs only when pushing to 'test' branch

env:
  AWS_REGION: eu-central-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PRIVATE_SSH_KEY: ${{ secrets.PRIVATE_SSH_KEY }}
  PUBLIC_IP: ${{ secrets.PUBLIC_IP }}
  DOCKER_REPOSITORY: coinchart
  IMAGE_TAG: coinchart-frontend-${{ github.ref_name }}

jobs:
  build-and-push-to-ecr:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v2

      - name: üîê Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: üèóÔ∏è Build and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          aws ecr batch-delete-image --repository-name $DOCKER_REPOSITORY --image-ids imageTag=$IMAGE_TAG --region $AWS_REGION || true
          
          docker build -f Docker/Dockerfile -t $REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG

  deploy-to-ec2:
    needs: build-and-push-to-ecr
    runs-on: ubuntu-latest

    steps:
      - name: üîê Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: üöÄ Deploy to EC2 via SSH
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.PUBLIC_IP }}
          username: ec2-user
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: REGISTRY, DOCKER_REPOSITORY, IMAGE_TAG, AWS_REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
          script: |
            echo "üîÑ Updating EC2 instance..."

            # Install necessary packages
            sudo yum update -y
            sudo yum install docker -y
            sudo yum install awscli -y
            sudo yum install nginx -y
            sudo yum install certbot python3-certbot-nginx -y
            
            # Start Docker if not running
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo systemctl start nginx
            sudo systemctl enable nginx

            echo $(aws ecr get-login-password --region $AWS_REGION) | sudo docker login --username AWS --password-stdin $REGISTRY

            # Stop and remove old containers
            sudo docker stop coinchart_node || true
            sudo docker rm coinchart_node || true
            sudo docker system prune -a -f

            # Pull and start the new container
            sudo docker pull $REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
            sudo docker run -d \
              --name coinchart_node \
              --restart=on-failure \
              -p 5173:5173 \
              $REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG

            echo "‚úÖ Deployment to EC2 completed successfully!"



            # Validate and reload Nginx
            sudo nginx -t && sudo systemctl reload nginx

            # Wait for changes to take effect
            sleep 10

            # Install SSL certificate using Let's Encrypt
            sudo certbot --nginx -d ${DOMAIN_NAME} --non-interactive --agree-tos -m admin@${DOMAIN_NAME}

            # Set up automatic SSL renewal
            echo "0 0 * * * root certbot renew --quiet && systemctl reload nginx" | sudo tee -a /etc/crontab

            echo "SSL and Nginx setup completed successfully!"
